# When should this pipeline run?
# on pushes to master and PRs to master
# Note that you may not want to build packages on pull requests!
# You could also use on: release: ..., for deploying upon tagging a release.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
# What jobs does this workflow consist of?
jobs:
  build:
  # Use ubuntu as an image for our build environment
    runs-on: ubuntu-latest
  # What steps does this job consist of?
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
      # Setup version 12 of Java
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
    # Run all maven phases to deployment
    # with our repository as a target
      - name: Publish jar to GitHub Packages
        run: mvn deploy
        env:
          # Authenticate with GitHub using
          # token from the secrets context
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add distribution env vars
          # used in pom.xml
          DISTRIBUTION_ID: github
          DISTRIBUTION_NAME: Notes Example Project
          DISTRIBUTION_URL: https://maven.pkg.github.com/${{ github.repository }}

  # The job called "package-image"
  package-image:
    # Use ubuntu as an image for our build environment
    runs-on: ubuntu-latest
    # What steps does this job consist of?
    steps:
      # Checkout the code
    - uses: actions/checkout@v2
      # Setup version 12 of Java
    - name: Set up JDK 12
      uses: actions/setup-java@v1
      with:
        java-version: 12
      # Build JAR using maven
    - name: Build jar
      run: mvn package
      # Run a few (bash) commands to
      # build an publish an image
    - name: Build and publish Docker image to GitHub Packages
      env:
        DOCKER_IMAGE_TARGET: docker.pkg.github.com/${{ github.repository }}/notesexample
        GITHUB_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # 1. Build a docker image using the specified target as a name
  # 2. Login to GitHub docker registry by piping the token into the password prompt
  # 3. Push the image to the registry
      run: |
        docker build --tag ${DOCKER_IMAGE_TARGET} .
        echo "${GITHUB_PACKAGE_REGISTRY_TOKEN}" | docker login
        docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        docker push ${DOCKER_IMAGE_TARGET}
